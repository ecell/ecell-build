# Script to create MS Windows executables (*.exe) for E-Cell python bin scripts
# Uses Python's py2exe distutil
# Author: Satya Arjunan


from distutils.core import setup
import py2exe
import os
import sys
import getopt


def usage():
    ext = os.path.basename( sys.argv[0] )
    aProgramName, ext = os.path.splitext( ext )
    print '''
%s --	Creates MS-Windows executables (*.exe) from E-Cell Python bin scripts

Usage:
       %s [options] py2exe
       %s [-h] or [--help]
    '''% ( aProgramName, aProgramName, aProgramName )

def help():
    usage()
    ext = os.path.basename( sys.argv[0] )
    aProgramName, ext = os.path.splitext( ext )
    print '''
%s options:
   --source=[Python source]  This is a required option
   --icon=[Windows icon]   This is a required option
   --merge=[Python file]   Merge source with this file [default not merged]
   --console               Create a console application [default]
   --gui                   Create an MS-Windows GUI application
   --help or -h            Print this message.

This is a convenience script to create MS-Windows executables from E-Cell Python bin scripts
Written by:
    Satya Arjunan <satya@sfc.keio.ac.jp>
    '''% ( aProgramName )

def msg( outstr ):
    print "py2exeSetup " + outstr


def mergeVariables( aSourceFile, aMergeFile):
	varFile = open( aMergeFile )
	variables = varFile.read()
	varFile.close()
	scriptFile = open( aSourceFile )
	scripts = scriptFile.read()
	scriptFile.close()
	mergedFileName = aSourceFile + '.merge'
	if os.path.isfile( mergedFileName ):
		os.remove( mergedFileName )
	mergedFile = open( mergedFileName, 'a')
	mergedFile.write(variables)
	mergedFile.write(scripts)
	mergedFile.close()
	return mergedFile.name



try:
	opts , args = getopt.getopt( sys.argv[1:], "h",	["help", "console",
			"gui", "merge=", "source=", "icon="])
except:
	help()
	sys.exit(1)

CONSOLE = True
MERGE = False
SOURCE = ''
ICON = ''
theSourceFile = None
theIconFile = None
theMergeFile = None

# -------------------------------------
# check argument
# -------------------------------------
for anOption, anArg in opts:
	# print help message
	if anOption in ( "-h", '--help' ):
		help()
		sys.exit(0)
		
	# create console app
	if anOption == "--console":
		CONSOLE = True
		
	# create Windows GUI app
	if anOption == "--gui":
		CONSOLE = False
	
	# merge source file with contents of another file
	if anOption == "--merge":
		MERGE = True
		theMergeFile = anArg
	
	# set source filename
	if anOption == "--source":
		SOURCE = anArg
	
	# set icon filename
	if anOption == "--icon":
		ICON = anArg

# hack to remove arguments specific to py2exeSetup, py2exe complains if we don't
sys.argv = [ sys.argv[0], sys.argv[len(sys.argv) - 1] ]

if not os.path.isfile( SOURCE ):
	help()
	msg( "error: Please provide a valid source file" )
	sys.exit(1)

if not os.path.isfile( ICON ):
	help()
	msg( "error: Please provide a valid icon file" )
	sys.exit(1)

theIconFile = ICON

if MERGE:
	if not os.path.isfile( theMergeFile ):
		help()
		msg( "error: Please provide a valid file to be merged" )
		sys.exit(1)
	theSourceFile = mergeVariables( SOURCE, theMergeFile )
else:
	theSourceFile = SOURCE


# run py2exe
if CONSOLE:
	setup(	
		console = [
			{"script": theSourceFile, "icon_resources": [ ( 1, theIconFile ) ] }
		],
		zipfile = 'shared.zip',
		options = {
			'py2exe': {
				'excludes' : ['ecell', 'gtk', 'ecell.emc' ],
                                'unbuffered' : 1,
				'dist_dir' : '.'
			}
		}
	)
else:
	setup(	
		windows = [
			{"script": theSourceFile, "icon_resources": [ ( 1, theIconFile ) ] }
		],
		zipfile = 'shared.zip',
		options = {
			'py2exe': {
				'excludes' : ['ecell', 'gtk', 'ecell.emc'],
                                'unbuffered' : 1,
				'dist_dir' : '.'
			}
		}
	)

# clean up
if MERGE and os.path.isfile( theSourceFile ):
	os.remove( theSourceFile )

